[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "realtime-whisper-subtitles"
version = "2.0.0"
description = "Real-time speech recognition and subtitle generation using OpenAI Whisper with CUDA optimization"
authors = [
    {name = "Real-time Whisper Subtitles Team", email = "contact@example.com"}
]
license = {file = "LICENSE"}
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["whisper", "speech-recognition", "real-time", "subtitles", "transcription", "ai", "cuda"]

dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "websockets>=12.0",
    "jinja2>=3.1.2",
    "python-multipart>=0.0.6",
    "torch>=2.1.0",
    "torchaudio>=2.1.0",
    "faster-whisper>=0.9.0",
    "librosa>=0.10.1",
    "soundfile>=0.12.1",
    "pydub>=0.25.1",
    "webrtcvad>=2.0.10",
    "numpy>=1.24.0",
    "scipy>=1.11.4",
    "pandas>=2.1.3",
    "psutil>=5.9.6",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "flake8>=6.1.0",
    "isort>=5.12.0",
    "mypy>=1.7.1",
    "jupyter>=1.0.0",
    "ipython>=8.17.2",
]
monitoring = [
    "prometheus-client>=0.19.0",
    "grafana-api>=1.0.3",
]
audio = [
    "noisereduce>=3.0.0",
    "speechbrain>=0.5.16",
    "pyaudio>=0.2.11",
    "sounddevice>=0.4.6",
]
production = [
    "gunicorn>=21.2.0",
    "supervisor>=4.2.5",
    "redis>=5.0.1",
    "sqlalchemy>=2.0.23",
]

[project.urls]
Homepage = "https://github.com/nullpox7/realtime-whisper-subtitles-optimized"
Repository = "https://github.com/nullpox7/realtime-whisper-subtitles-optimized"
Documentation = "https://github.com/nullpox7/realtime-whisper-subtitles-optimized/blob/main/README.md"
"Bug Reports" = "https://github.com/nullpox7/realtime-whisper-subtitles-optimized/issues"

[project.scripts]
whisper-subtitles = "src.web_interface:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.html", "*.css", "*.js", "*.json", "*.yml", "*.yaml"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m "not slow"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]
