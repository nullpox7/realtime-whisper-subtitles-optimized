#!/bin/bash
# Docker??????? - Real-time Whisper Subtitles
# ????Docker?????????????????????
# Encoding: UTF-8

set -e

echo "? Docker??????? v2.3.0"
echo "==============================="
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 1. ????????
check_current_status() {
    log_info "?????????..."
    
    # Docker daemon status
    if ! docker info >/dev/null 2>&1; then
        log_error "Docker daemon??????????"
        echo "????: sudo systemctl start docker"
        exit 1
    fi
    
    # Check for running containers
    running_containers=$(docker ps --format "table {{.Names}}\t{{.Status}}" | grep -v "NAMES" || true)
    if [ -n "$running_containers" ]; then
        log_warning "????????????????:"
        echo "$running_containers"
        echo ""
        read -p "??????????????? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            log_info "???????????..."
            docker-compose down --remove-orphans 2>/dev/null || true
            docker-compose -f docker-compose.gpu.yml down --remove-orphans 2>/dev/null || true
            log_success "????????"
        fi
    fi
}

# 2. ?????????????
prepare_base_images() {
    log_info "???????????..."
    
    # Python base image
    log_info "Python 3.11????????..."
    if docker pull python:3.11-slim >/dev/null 2>&1; then
        log_success "? python:3.11-slim"
    else
        log_error "? python:3.11-slim ??????"
        exit 1
    fi
    
    # Check for GPU availability
    if command -v nvidia-smi >/dev/null 2>&1 && nvidia-smi >/dev/null 2>&1; then
        log_info "GPU?????????CUDA 11.8????????..."
        if docker pull nvidia/cuda:11.8-devel-ubuntu22.04 >/dev/null 2>&1; then
            log_success "? nvidia/cuda:11.8-devel-ubuntu22.04"
            GPU_AVAILABLE=true
        else
            log_warning "? CUDA 11.8???????????CPU mode????"
            GPU_AVAILABLE=false
        fi
    else
        log_info "GPU????CPU mode????"
        GPU_AVAILABLE=false
    fi
    
    # Redis image
    log_info "Redis????????..."
    if docker pull redis:7.2-alpine >/dev/null 2>&1; then
        log_success "? redis:7.2-alpine"
    else
        log_error "? redis:7.2-alpine ??????"
        exit 1
    fi
}

# 3. ????????????
deploy_fixed_files() {
    log_info "?????????????..."
    
    # Backup existing files
    if [ -f "Dockerfile" ]; then
        cp Dockerfile Dockerfile.backup.$(date +%Y%m%d_%H%M%S)
        log_info "Dockerfile???????????"
    fi
    
    if [ -f "docker-compose.yml" ]; then
        cp docker-compose.yml docker-compose.yml.backup.$(date +%Y%m%d_%H%M%S)
        log_info "docker-compose.yml???????????"
    fi
    
    # Create fixed environment file
    if [ ! -f ".env" ]; then
        log_info ".env????????..."
        cat > .env << 'EOF'
# Real-time Whisper Subtitles - Fixed Configuration
HOST=0.0.0.0
PORT=8000
DEBUG=false
WHISPER_MODEL=base
LANGUAGE=auto
SAMPLE_RATE=16000
CHUNK_SIZE=1024
VAD_MODE=3
MAX_WORKERS=2
BATCH_SIZE=8
MODEL_PATH=/app/data/models
OUTPUT_PATH=/app/data/outputs
LOG_PATH=/app/data/logs
LOG_LEVEL=INFO
RATE_LIMIT=100
MAX_UPLOAD_SIZE=100
ENABLE_CORS=true
CORS_ORIGINS=*
TZ=Asia/Tokyo
LANG=en_US.UTF-8
LC_ALL=en_US.UTF-8
DOCKER_NETWORK=whisper-network
EOF
        log_success ".env???????????"
    fi
    
    # Create data directories
    log_info "?????????????..."
    mkdir -p data/{models,outputs,logs,cache}
    mkdir -p config/{grafana,prometheus}
    chmod -R 755 data/ 2>/dev/null || true
    log_success "??????????"
}

# 4. Docker build???
test_docker_build() {
    log_info "Docker build???????..."
    
    # Create test Dockerfile
    cat > Dockerfile.test << 'EOF'
FROM python:3.11-slim
WORKDIR /app
RUN pip install --no-cache-dir fastapi uvicorn
CMD ["echo", "Build test successful"]
EOF
    
    if docker build -f Dockerfile.test -t whisper-build-test . >/dev/null 2>&1; then
        log_success "? Docker build ?????"
        docker rmi whisper-build-test >/dev/null 2>&1
        rm -f Dockerfile.test
        return 0
    else
        log_error "? Docker build ?????"
        rm -f Dockerfile.test
        return 1
    fi
}

# 5. ???????????????
build_and_start() {
    log_info "?????????????????..."
    
    # Choose appropriate compose file
    if [ "$GPU_AVAILABLE" = "true" ]; then
        log_info "GPU ????????..."
        COMPOSE_FILE="docker-compose.gpu.yml"
        
        # Check NVIDIA Container Toolkit
        if docker run --rm --gpus all nvidia/cuda:11.8-base-ubuntu22.04 nvidia-smi >/dev/null 2>&1; then
            log_success "NVIDIA Container Toolkit??????"
        else
            log_warning "NVIDIA Container Toolkit?????????CPU???????????"
            GPU_AVAILABLE=false
        fi
    fi
    
    if [ "$GPU_AVAILABLE" != "true" ]; then
        log_info "CPU ????????..."
        COMPOSE_FILE="docker-compose.yml"
    fi
    
    # Build images
    log_info "Docker?????????... (????????????)"
    if docker-compose -f "$COMPOSE_FILE" build --no-cache; then
        log_success "? ?????"
    else
        log_error "? ?????"
        return 1
    fi
    
    # Start services
    log_info "????????..."
    if docker-compose -f "$COMPOSE_FILE" up -d; then
        log_success "? ????????"
        echo "COMPOSE_FILE=$COMPOSE_FILE" > /tmp/whisper_config
    else
        log_error "? ????????"
        return 1
    fi
}

# 6. ???????
health_check() {
    log_info "???????????..."
    
    # Wait for startup
    log_info "?????????????? (60?)..."
    sleep 60
    
    # Health check attempts
    for i in {1..5}; do
        if curl -f http://localhost:8000/health >/dev/null 2>&1; then
            health_data=$(curl -s http://localhost:8000/health)
            status=$(echo "$health_data" | grep -o '"status":"[^"]*"' | cut -d'"' -f4 2>/dev/null || echo "healthy")
            
            log_success "? ???????????????????!"
            echo ""
            echo "? ????!"
            echo "============"
            echo "? ????URL: http://localhost:8000"
            echo "? ?????: $status"
            echo "??  GPU??: ${GPU_AVAILABLE:-false}"
            echo ""
            echo "??  ??????:"
            
            if [ -f "/tmp/whisper_config" ]; then
                source /tmp/whisper_config
                echo "  ? ????: docker-compose -f $COMPOSE_FILE logs -f"
                echo "  ? ???: docker-compose -f $COMPOSE_FILE restart"
                echo "  ??  ??: docker-compose -f $COMPOSE_FILE down"
                rm -f /tmp/whisper_config
            fi
            
            return 0
        else
            log_warning "????????? $i/5 ???????..."
            sleep 10
        fi
    done
    
    log_warning "??????????????????????????????????????????"
    echo "????: http://localhost:8000"
}

# ???????
main() {
    echo "Docker????????????????..."
    echo ""
    
    check_current_status
    prepare_base_images
    deploy_fixed_files
    
    if test_docker_build; then
        build_and_start
        health_check
    else
        log_error "Docker build???????????????????????"
        echo ""
        echo "? ???????????:"
        echo "  1. Docker daemon???????: docker info"
        echo "  2. ?????????: df -h"
        echo "  3. ???????????: ping 8.8.8.8"
        echo "  4. Docker????: sudo systemctl restart docker"
        exit 1
    fi
}

# ?????
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "Docker???????"
    echo ""
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  --help, -h    ?????????????"
    echo "  --force       ?????????????"
    echo ""
    echo "????????????????:"
    echo "  ? ????????"
    echo "  ? ?????????????"
    echo "  ? ????????????"
    echo "  ??  ????????????"
    echo "  ? ???????"
    echo "  ? ??????????"
    echo ""
    exit 0
fi

# ????????????
if [ "$1" != "--force" ]; then
    echo "????????????????:"
    echo "  ? ?????????"
    echo "  ? ??????????"
    echo "  ? ?????Dockerfile???"
    echo "  ? ?????????????"
    echo ""
    read -p "??????? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "???????"
        exit 0
    fi
fi

# ??
main "$@"