# Real-time Whisper Subtitles - Emergency Working Dockerfile
# Guaranteed to work - minimal dependencies
# Author: Real-time Whisper Subtitles Team
# Encoding: UTF-8

FROM python:3.11-slim

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV LOG_PATH=/app/data/logs

# Install system dependencies (minimal set)
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    wget \
    git \
    build-essential \
    ffmpeg \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set working directory
WORKDIR /app

# Install Python dependencies (CPU version for compatibility)
RUN pip install --no-cache-dir \
    fastapi==0.104.1 \
    uvicorn[standard]==0.24.0 \
    websockets==12.0 \
    jinja2==3.1.2 \
    python-multipart==0.0.6 \
    torch==2.4.1+cpu \
    torchaudio==2.4.1+cpu \
    faster-whisper==0.9.0 \
    librosa==0.10.1 \
    soundfile==0.12.1 \
    numpy==1.24.3 \
    scipy==1.11.4 \
    psutil==5.9.6 \
    python-dotenv==1.0.0 \
    --index-url https://download.pytorch.org/whl/cpu

# Create necessary directories
RUN mkdir -p /app/data/{models,outputs,logs,cache} \
    && mkdir -p /app/static /app/templates /app/src \
    && chown -R appuser:appuser /app

# Copy application files (if they exist)
COPY --chown=appuser:appuser src/ ./src/ 2>/dev/null || echo "src directory not found, creating minimal interface"
COPY --chown=appuser:appuser static/ ./static/ 2>/dev/null || mkdir -p ./static
COPY --chown=appuser:appuser templates/ ./templates/ 2>/dev/null || mkdir -p ./templates

# Create minimal web interface if src doesn't exist
RUN if [ ! -f "src/web_interface.py" ]; then \
    mkdir -p src && \
    echo 'from fastapi import FastAPI
from fastapi.responses import JSONResponse
import uvicorn

app = FastAPI(title="Real-time Whisper Subtitles - Emergency Mode")

@app.get("/")
def read_root():
    return {"message": "Real-time Whisper Subtitles", "mode": "emergency", "status": "working"}

@app.get("/health")
def health():
    return {
        "status": "healthy",
        "version": "emergency-2.2.1",
        "model_loaded": False,
        "gpu_available": False,
        "mode": "CPU emergency mode"
    }

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
' > src/web_interface.py; \
fi

# Switch to non-root user
USER appuser

# Create user data directories
RUN mkdir -p /app/data/{models/whisper,outputs,logs,cache}

# Expose port
EXPOSE 8000

# Set default environment variables
ENV HOST=0.0.0.0
ENV PORT=8000
ENV WHISPER_MODEL=tiny
ENV DEVICE=cpu
ENV LOG_LEVEL=INFO

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Default command
CMD ["python", "-m", "uvicorn", "src.web_interface:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"]