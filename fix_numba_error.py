#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Numba????????????????
realtime-whisper-subtitles-optimized??

RuntimeError: cannot cache function '__o_fold': no locator available for file ??????

Author: Real-time Whisper Subtitles Team
Encoding: UTF-8
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def run_command(cmd, capture_output=True, shell=True):
    """???????"""
    try:
        if capture_output:
            result = subprocess.run(cmd, shell=shell, capture_output=True, text=True)
            return result.returncode, result.stdout, result.stderr
        else:
            result = subprocess.run(cmd, shell=shell)
            return result.returncode, "", ""
    except Exception as e:
        return 1, "", str(e)

def check_numba_error():
    """Numba????????"""
    print("? Numba???????????????...")
    
    # Docker??????????
    ret, stdout, stderr = run_command("docker-compose logs whisper-subtitles 2>&1 | grep -i 'cannot cache function\\|__o_fold\\|no locator'")
    
    if ret == 0 and stdout.strip():
        print("? Numba?????????????????:")
        for line in stdout.strip().split('\n'):
            print(f"   {line}")
        return True
    else:
        print("? Numba??????????????")
        return False

def backup_original_files():
    """?????????????"""
    print("? ??????????????...")
    
    files_to_backup = ['Dockerfile', 'requirements.txt', 'docker-compose.yml']
    backup_dir = Path('backup_before_numba_fix')
    backup_dir.mkdir(exist_ok=True)
    
    for file in files_to_backup:
        if Path(file).exists():
            shutil.copy2(file, backup_dir / f"{file}.backup")
            print(f"   ? {file} ???????????")
    
    print(f"? ??????? {backup_dir} ????????")

def fix_dockerfile():
    """Dockerfile???"""
    print("?? Dockerfile????...")
    
    # ????Dockerfile??????
    dockerfile_url = "https://raw.githubusercontent.com/nullpox7/realtime-whisper-subtitles-optimized/main/Dockerfile.fixed"
    ret, stdout, stderr = run_command(f"curl -s {dockerfile_url}")
    
    if ret == 0 and stdout:
        with open('Dockerfile', 'w', encoding='utf-8') as f:
            f.write(stdout)
        print("? Dockerfile???????")
    else:
        print("? ????Dockerfile??????????")
        return False
    
    return True

def fix_requirements():
    """requirements.txt???"""
    print("? requirements.txt????...")
    
    # ????requirements.txt??????
    requirements_url = "https://raw.githubusercontent.com/nullpox7/realtime-whisper-subtitles-optimized/main/requirements_fixed.txt"
    ret, stdout, stderr = run_command(f"curl -s {requirements_url}")
    
    if ret == 0 and stdout:
        with open('requirements.txt', 'w', encoding='utf-8') as f:
            f.write(stdout)
        print("? requirements.txt???????")
    else:
        print("? ????requirements.txt??????????")
        return False
    
    return True

def fix_docker_compose():
    """docker-compose.yml???"""
    print("? docker-compose.yml????...")
    
    # ????????????
    with open('docker-compose.yml', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Numba???????/??
    numba_env_vars = """      # Numba cache configuration - FIXED to disable JIT caching
      - NUMBA_DISABLE_JIT=1
      - NUMBA_CACHE_DIR=/tmp/numba_cache
      - NUMBA_THREADING_LAYER=workqueue
      - NUMBA_PARALLEL=1
      # Additional environment variables for stability
      - PYTHONPATH=/app
      - PYTHONIOENCODING=utf-8"""
    
    # ???Numba???????
    if "NUMBA_CACHE_DIR=/home/appuser/.numba" in content:
        content = content.replace(
            "      # Numba cache configuration to fix caching issues\n      - NUMBA_CACHE_DIR=/home/appuser/.numba\n      - NUMBA_DISABLE_JIT=0\n      - NUMBA_THREADING_LAYER=workqueue",
            numba_env_vars
        )
    elif "NUMBA_CACHE_DIR" not in content:
        # COMPUTE_TYPE=auto?????
        content = content.replace(
            "      - COMPUTE_TYPE=auto",
            f"      - COMPUTE_TYPE=auto\n{numba_env_vars}"
        )
    
    with open('docker-compose.yml', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("? docker-compose.yml???????")
    return True

def rebuild_containers():
    """?????????"""
    print("? Docker??????????...")
    
    commands = [
        "docker-compose down",
        "docker system prune -f",
        "docker-compose build --no-cache whisper-subtitles",
        "docker-compose up -d"
    ]
    
    for cmd in commands:
        print(f"   ???: {cmd}")
        ret, stdout, stderr = run_command(cmd)
        if ret != 0:
            print(f"   ? ???: {stderr}")
            return False
        else:
            print(f"   ? ??")
    
    return True

def verify_fix():
    """?????"""
    print("? ??????...")
    
    import time
    print("   30????...")
    time.sleep(30)
    
    # ???????
    ret, stdout, stderr = run_command("curl -f http://localhost:8000/health")
    if ret == 0:
        print("? ???????????????????")
        return True
    else:
        print("? ???????????????????")
        
        # ?????
        print("   ? ?????????...")
        ret2, stdout2, stderr2 = run_command("docker-compose logs --tail 20 whisper-subtitles")
        if stdout2:
            print("   ?????:")
            for line in stdout2.split('\n')[-10:]:
                if line.strip():
                    print(f"     {line}")
        
        return False

def show_results():
    """?????"""
    print("\n" + "="*60)
    print("? Numba?????????????!")
    print("="*60)
    print()
    print("? ????:")
    print("   ? NUMBA_DISABLE_JIT=1 ?JIT?????????")
    print("   ? Numba?LLVMLite?????????????")
    print("   ? ????????????????")
    print("   ? Docker?????????")
    print()
    print("? ????URL:")
    print("   ??????: http://localhost:8000")
    print("   ???????: http://localhost:8000/health")
    print()
    print("? ???????:")
    print("   ????: docker-compose logs -f whisper-subtitles")
    print("   ???: docker-compose restart whisper-subtitles")
    print("   ??: docker-compose down")
    print()
    print("? ??:")
    print("   - Numba?????????????????????????????????????")
    print("   - ????????????????????????????????????")

def main():
    """?????"""
    print("? Numba????????????????")
    print("=" * 50)
    print()
    
    # ???????
    has_error = check_numba_error()
    
    # ???????
    if has_error:
        response = input("\n? Numba??????????? (y/N): ")
        if response.lower() != 'y':
            print("????????????")
            return
    else:
        response = input("\n? ?????????????? (y/N): ")
        if response.lower() != 'y':
            print("????????????")
            return
    
    try:
        # ??????
        backup_original_files()
        
        # ??????
        if not fix_dockerfile():
            print("? Dockerfile??????????")
            return
        
        if not fix_requirements():
            print("? requirements.txt??????????")
            return
        
        fix_docker_compose()
        
        # ????
        if rebuild_containers():
            print("? ????????????????")
            
            # ????
            if verify_fix():
                show_results()
            else:
                print("??  ?????????????????????????")
                print("   ????????? http://localhost:8000 ???????????")
        else:
            print("? ????????????????")
            print("   ??? docker-compose logs ?????????")
    
    except Exception as e:
        print(f"? ??????????????: {e}")
        print("   ????????????????????:")
        print("   cp backup_before_numba_fix/* .")

if __name__ == "__main__":
    main()
