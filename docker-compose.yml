# Real-time Whisper Subtitles - Docker Compose Configuration
# CUDA 12.9.0 + cuDNN optimized version
# Encoding: UTF-8

version: '3.8'

services:
  # Main Whisper Application
  whisper-subtitles:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${WHISPER_CONTAINER_NAME:-whisper-subtitles-app}
    restart: unless-stopped
    ports:
      - "${PORT:-8000}:8000"
    volumes:
      - ./data/models:/app/data/models
      - ./data/outputs:/app/data/outputs
      - ./data/logs:/app/data/logs
      - ./data/cache:/app/data/cache
    environment:
      - HOST=${HOST:-0.0.0.0}
      - PORT=${PORT:-8000}
      - DEBUG=${DEBUG:-false}
      - WHISPER_MODEL=${WHISPER_MODEL:-base}
      - LANGUAGE=${LANGUAGE:-ja}
      - SAMPLE_RATE=${SAMPLE_RATE:-16000}
      - CHUNK_SIZE=${CHUNK_SIZE:-1024}
      - VAD_MODE=${VAD_MODE:-3}
      - MAX_WORKERS=${MAX_WORKERS:-4}
      - BATCH_SIZE=${BATCH_SIZE:-16}
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-0}
      - NVIDIA_DRIVER_CAPABILITIES=${NVIDIA_DRIVER_CAPABILITIES:-compute,utility,video}
      - CUDA_MEMORY_FRACTION=${CUDA_MEMORY_FRACTION:-0.8}
      - MODEL_PATH=/app/data/models
      - OUTPUT_PATH=/app/data/outputs
      - LOG_PATH=/app/data/logs
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - RATE_LIMIT=${RATE_LIMIT:-100}
      - MAX_UPLOAD_SIZE=${MAX_UPLOAD_SIZE:-100}
      - ENABLE_CORS=${ENABLE_CORS:-true}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      - TZ=${TZ:-Asia/Tokyo}
      - LANG=${LANG:-ja_JP.UTF-8}
      - LC_ALL=${LC_ALL:-ja_JP.UTF-8}
      - ENABLE_QUANTIZATION=${ENABLE_QUANTIZATION:-true}
      - COMPUTE_TYPE=${COMPUTE_TYPE:-float16}
      - ENABLE_BEAM_SEARCH=${ENABLE_BEAM_SEARCH:-true}
      - BEAM_SIZE=${BEAM_SIZE:-5}
      - TEMPERATURE=${TEMPERATURE:-0.0}
      - MIN_CONFIDENCE=${MIN_CONFIDENCE:-0.5}
      - ENABLE_WORD_TIMESTAMPS=${ENABLE_WORD_TIMESTAMPS:-true}
      - ENABLE_PUNCTUATION=${ENABLE_PUNCTUATION:-true}
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - whisper-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching and session storage
  redis:
    image: redis:7.2-alpine
    container_name: ${REDIS_CONTAINER_NAME:-whisper-redis}
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - whisper-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: ${PROMETHEUS_CONTAINER_NAME:-whisper-prometheus}
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - whisper-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:10.2.0
    container_name: ${GRAFANA_CONTAINER_NAME:-whisper-grafana}
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - whisper-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:1.25-alpine
    container_name: whisper-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
      - ./static:/usr/share/nginx/html/static
    networks:
      - whisper-network
    depends_on:
      - whisper-subtitles
    profiles:
      - production

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  whisper-network:
    name: ${DOCKER_NETWORK:-whisper-network}
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Development override
# Usage: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
# docker-compose.dev.yml
version: '3.8'

services:
  whisper-subtitles:
    build:
      target: builder
    volumes:
      - .:/app
      - /app/data/models  # Don't override models in development
    environment:
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - DEVELOPMENT_MODE=true
    ports:
      - "8000:8000"
      - "8001:8001"  # Additional debug port

# Production override
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
---
# docker-compose.prod.yml
version: '3.8'

services:
  whisper-subtitles:
    environment:
      - DEBUG=false
      - LOG_LEVEL=INFO
      - DEVELOPMENT_MODE=false
      - ENABLE_METRICS=true
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      interval: 15s
      timeout: 5s
      retries: 5
