# Real-time Whisper Subtitles - CUDA 12.9 Nightly Dockerfile
# PyTorch Nightly + CUDA 12.9 cutting-edge configuration
# Author: Real-time Whisper Subtitles Team
# Encoding: UTF-8

FROM nvidia/cuda:12.6.1-devel-ubuntu22.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1
ENV LOG_PATH=/app/data/logs

# CUDA 12.6+ settings (compatible with CUDA 12.9 host)
ENV CUDA_VISIBLE_DEVICES=all
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility
ENV CUDA_CACHE_PATH=/tmp/cuda_cache
ENV TORCH_CUDA_ARCH_LIST="7.0;7.5;8.0;8.6;8.9;9.0"

# Memory and stability settings
ENV MALLOC_TRIM_THRESHOLD_=131072
ENV MALLOC_MMAP_THRESHOLD_=131072
ENV MALLOC_MMAP_MAX_=65536
ENV PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
ENV CUDA_MODULE_LOADING=LAZY

# C++ ABI compatibility
ENV _GLIBCXX_USE_CXX11_ABI=1
ENV TORCH_CXX_FLAGS="-D_GLIBCXX_USE_CXX11_ABI=1"

# Disable JIT for stability
ENV NUMBA_DISABLE_JIT=1
ENV NUMBA_CACHE_DIR=/dev/null

# Locale settings
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV TZ=Asia/Tokyo

# Install system dependencies
RUN apt-get update && apt-get install -y \
    software-properties-common \
    curl \
    wget \
    gnupg \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Add Python 3.11
RUN add-apt-repository ppa:deadsnakes/ppa -y && \
    apt-get update && \
    apt-get install -y \
    python3.11 \
    python3.11-dev \
    python3.11-distutils \
    python3-pip \
    build-essential \
    git \
    pkg-config \
    ffmpeg \
    libavcodec-dev \
    libavformat-dev \
    htop \
    && rm -rf /var/lib/apt/lists/*

# Setup Python
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1 && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1

RUN curl -sS https://bootstrap.pypa.io/get-pip.py | python3.11

# Create app user
RUN groupadd -r appuser && useradd -r -g appuser -s /bin/bash appuser

WORKDIR /app

# Copy requirements
COPY requirements.gpu.nightly.txt .

# Upgrade pip
RUN python3.11 -m pip install --upgrade pip setuptools wheel

# Install PyTorch Nightly with CUDA 12.6+ support
RUN python3.11 -m pip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cu124

# Verify PyTorch Nightly installation
RUN python3.11 -c "
import torch, torchaudio
print('='*60)
print('? PyTorch Nightly + CUDA 12.6+ Compatibility Test')
print(f'PyTorch version: {torch.__version__}')
print(f'torchaudio version: {torchaudio.__version__}')
print(f'CUDA available: {torch.cuda.is_available()}')
print(f'CUDA version: {torch.version.cuda}')
if torch.cuda.is_available():
    print(f'GPU device: {torch.cuda.get_device_name(0)}')
    print(f'GPU capability: {torch.cuda.get_device_capability(0)}')
print('? Nightly build compatibility verified')
print('='*60)
"

# Install other dependencies
RUN python3.11 -m pip install --no-cache-dir -r requirements.gpu.nightly.txt

# Create directories and copy files
RUN mkdir -p /app/data/{models,outputs,logs,cache} \
    && mkdir -p /app/{static,templates,src,config,logs} \
    && mkdir -p /tmp/cuda_cache \
    && mkdir -p /home/appuser/.cache \
    && chown -R appuser:appuser /app \
    && chown -R appuser:appuser /home/appuser \
    && chmod -R 755 /tmp/cuda_cache

COPY src/ ./src/
COPY static/ ./static/
COPY templates/ ./templates/
COPY .env.gpu.example .env.example

RUN chown -R appuser:appuser /app

USER appuser

# Final verification
RUN python3.11 -c "
import torch, torchaudio
print('? Final CUDA 12.6+ compatibility verification:')
print(f'? PyTorch: {torch.__version__}')
print(f'? torchaudio: {torchaudio.__version__}')

if torch.cuda.is_available():
    x = torch.randn(2, 2).cuda()
    y = torch.randn(2, 2).cuda()
    z = torch.matmul(x, y)
    print(f'? CUDA operations successful')

import torchaudio.transforms as T
transform = T.MelSpectrogram()
print(f'? torchaudio transforms working')
print('? CUDA 12.6+ ready for production!')
"

EXPOSE 8000

HEALTHCHECK --interval=30s --timeout=60s --start-period=180s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

ENV HOST=0.0.0.0
ENV PORT=8000
ENV WHISPER_MODEL=large-v3
ENV DEVICE=cuda
ENV COMPUTE_TYPE=float16

CMD ["python3.11", "-m", "uvicorn", "src.web_interface:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"]
