# Real-time Whisper Subtitles - GPU Dockerfile (cuDNN Fixed v2.2.3)
# CUDA 12.4 + cuDNN 8.x/9.x compatibility fixed
# Author: Real-time Whisper Subtitles Team
# Encoding: UTF-8

FROM nvidia/cuda:12.4.1-devel-ubuntu22.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1
ENV LOG_PATH=/app/data/logs

# Memory error prevention - CRITICAL: Disable ALL JIT compilation
ENV NUMBA_DISABLE_JIT=1
ENV NUMBA_CACHE_DIR=/dev/null
ENV NUMBA_THREADING_LAYER=workqueue
ENV NUMBA_PARALLEL=0

# CUDA 12.4 optimization settings
ENV CUDA_VISIBLE_DEVICES=all
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility
ENV CUDA_CACHE_PATH=/tmp/cuda_cache
ENV TORCH_CUDA_ARCH_LIST="7.0;7.5;8.0;8.6;8.9;9.0"

# cuDNN compatibility settings - FIXED for both 8.x and 9.x
ENV CUDNN_VERSION=9
ENV TORCH_CUDNN_V8_API_ENABLED=1
ENV TORCH_CUDNN_V9_API_ENABLED=1
ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/lib:${LD_LIBRARY_PATH}"

# Memory allocator stabilization
ENV MALLOC_TRIM_THRESHOLD_=131072
ENV MALLOC_MMAP_THRESHOLD_=131072
ENV MALLOC_MMAP_MAX_=65536

# PyTorch CUDA settings
ENV PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
ENV CUDA_MEMORY_FRACTION=0.85
ENV CUDA_MODULE_LOADING=LAZY

# Locale settings
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV TZ=Asia/Tokyo

# Update package lists and install essential packages
RUN apt-get update && apt-get install -y \
    software-properties-common \
    curl \
    wget \
    gnupg \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Add deadsnakes PPA for Python 3.11
RUN add-apt-repository ppa:deadsnakes/ppa -y && \
    apt-get update

# Install Python 3.11 and essential tools
RUN apt-get install -y \
    python3.11 \
    python3.11-dev \
    python3.11-distutils \
    python3-pip \
    build-essential \
    git \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Install audio processing libraries (minimal set)
RUN apt-get update && apt-get install -y \
    ffmpeg \
    libavcodec-dev \
    libavformat-dev \
    libavutil-dev \
    libswscale-dev \
    libswresample-dev \
    libasound2-dev \
    && rm -rf /var/lib/apt/lists/*

# Install cuDNN libraries from NVIDIA repositories
# This provides both cuDNN 8.x compatibility libraries and cuDNN 9.x
RUN apt-get update && apt-get install -y \
    libcudnn8 \
    libcudnn8-dev \
    && apt-get install -y libcudnn9-cuda-12 || echo "cuDNN 9 not available in package manager" \
    && rm -rf /var/lib/apt/lists/*

# Install optional packages with error handling
RUN apt-get update && apt-get install -y \
    htop \
    && apt-get install -y nvtop || echo "nvtop not available, skipping..." \
    && rm -rf /var/lib/apt/lists/*

# Create symbolic links for python
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1 && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1

# Install pip for Python 3.11
RUN curl -sS https://bootstrap.pypa.io/get-pip.py | python3.11

# Create app user for security
RUN groupadd -r appuser && useradd -r -g appuser -s /bin/bash appuser

# Set working directory
WORKDIR /app

# Copy requirements file first for better caching
COPY requirements.gpu.txt .

# Upgrade pip and install wheel
RUN python3.11 -m pip install --upgrade pip==24.2 setuptools==72.1.0 wheel==0.44.0

# Install PyTorch with CUDA 12.4 support (stable version)
RUN python3.11 -m pip install --no-cache-dir \
    torch==2.4.1+cu124 \
    torchaudio==2.4.1+cu124 \
    --index-url https://download.pytorch.org/whl/cu124

# Verify PyTorch installation
RUN python3.11 -c "import torch; print(f'PyTorch: {torch.__version__}'); print(f'CUDA Available: {torch.cuda.is_available()}')"

# Install other Python dependencies (excluding CUDA-specific packages that conflict)
RUN python3.11 -m pip install --no-cache-dir \
    fastapi==0.111.0 \
    uvicorn[standard]==0.30.1 \
    websockets==12.0 \
    jinja2==3.1.4 \
    python-multipart==0.0.9 \
    faster-whisper==1.0.3 \
    transformers==4.42.3 \
    librosa==0.10.2 \
    soundfile==0.12.1 \
    numpy==1.26.4 \
    scipy==1.13.1 \
    redis==5.0.7 \
    psutil==6.0.0 \
    python-dotenv==1.0.1 \
    requests==2.32.3 \
    aiofiles==24.1.0 \
    gunicorn==22.0.0 \
    prometheus-client==0.20.0 \
    tqdm==4.66.4 \
    packaging==24.1 \
    httpx==0.27.0 \
    structlog==24.2.0 \
    python-dateutil==2.9.0 \
    pyyaml==6.0.1 \
    pympler==0.9 \
    resampy==0.4.3 \
    audioread==3.0.1 \
    joblib==1.4.2 \
    huggingface-hub==0.24.2

# Create cuDNN compatibility symlinks if needed
RUN mkdir -p /usr/local/lib && \
    find /usr/lib/x86_64-linux-gnu -name "libcudnn*" -exec ln -sf {} /usr/local/lib/ \; || true && \
    find /usr/local/cuda/lib64 -name "libcudnn*" -exec ln -sf {} /usr/local/lib/ \; || true

# Create necessary directories with proper permissions
RUN mkdir -p /app/data/{models,outputs,logs,cache} \
    && mkdir -p /app/static \
    && mkdir -p /app/templates \
    && mkdir -p /app/src \
    && mkdir -p /app/config \
    && mkdir -p /app/logs \
    && mkdir -p /tmp/cuda_cache \
    && mkdir -p /home/appuser/.cache \
    && mkdir -p /home/appuser/.torch \
    && chown -R appuser:appuser /app \
    && chown -R appuser:appuser /home/appuser \
    && chown -R appuser:appuser /tmp/cuda_cache \
    && chmod -R 755 /tmp/cuda_cache \
    && chmod -R 755 /home/appuser

# Copy application files
COPY src/ ./src/
COPY static/ ./static/
COPY templates/ ./templates/

# Copy environment examples
COPY .env.gpu.example .env.example

# Set final permissions
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Create user-specific data directories
RUN mkdir -p /app/data/{models/whisper,outputs,logs,cache} \
    && mkdir -p /app/logs \
    && mkdir -p /home/appuser/.cache/torch \
    && mkdir -p /home/appuser/.cache/huggingface

# Final verification
RUN python3.11 -c "import torch, torchaudio; print(f'? PyTorch: {torch.__version__}'); print(f'? torchaudio: {torchaudio.__version__}'); print(f'? CUDA: {torch.cuda.is_available()}'); print(f'? cuDNN: {torch.backends.cudnn.version()}')"

# Expose port
EXPOSE 8000

# Health check with longer timeout for GPU initialization
HEALTHCHECK --interval=30s --timeout=60s --start-period=180s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Set default environment variables optimized for CUDA 12.4 and large models
ENV HOST=0.0.0.0
ENV PORT=8000
ENV WHISPER_MODEL=large-v3
ENV LANGUAGE=auto
ENV DEVICE=cuda
ENV COMPUTE_TYPE=float16
ENV BEAM_SIZE=5
ENV TEMPERATURE=0.0
ENV BEST_OF=5
ENV ENABLE_WORD_TIMESTAMPS=true
ENV VAD_FILTER=true
ENV BATCH_SIZE=16
ENV MAX_WORKERS=4

# Default command
CMD ["python3.11", "-m", "uvicorn", "src.web_interface:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"]