#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PyTorch ? torchaudio ?????????????
ABI?????????????????????

????:
  python3 pytorch_diagnostic.py
  
??? Docker??:
  docker run --rm --gpus all -v $(pwd)/pytorch_diagnostic.py:/tmp/diagnostic.py \
    your-image python3 /tmp/diagnostic.py
"""

import sys
import os
import subprocess
import importlib.util

def check_python_version():
    """Python ??????????"""
    print(f"? Python ?????: {sys.version}")
    print(f"? Python ????: {sys.executable}")
    return sys.version_info

def check_pytorch_installation():
    """PyTorch ??????????????"""
    print("\n? PyTorch ????????:")
    
    try:
        import torch
        print(f"? PyTorch ?????: {torch.__version__}")
        print(f"? PyTorch ??: {torch.__file__}")
        
        # ?????
        try:
            print(f"? PyTorch ?????: {torch.version.git_version}")
        except:
            print("? PyTorch ?????: ???????")
        
        # CUDA ??
        print(f"? CUDA ????: {torch.cuda.is_available()}")
        if torch.cuda.is_available():
            print(f"? CUDA ?????: {torch.version.cuda}")
            print(f"? GPU ?: {torch.cuda.device_count()}")
            if torch.cuda.device_count() > 0:
                for i in range(torch.cuda.device_count()):
                    print(f"? GPU {i}: {torch.cuda.get_device_name(i)}")
                    memory_total = torch.cuda.get_device_properties(i).total_memory / 1024**3
                    print(f"  ? VRAM: {memory_total:.1f}GB")
        
        return torch.__version__
    except ImportError as e:
        print(f"? PyTorch ????????: {e}")
        return None
    except Exception as e:
        print(f"? PyTorch ???????: {e}")
        return None

def check_torchaudio_installation():
    """torchaudio ??????????????"""
    print("\n? torchaudio ????????:")
    
    try:
        import torchaudio
        print(f"? torchaudio ?????: {torchaudio.__version__}")
        print(f"? torchaudio ??: {torchaudio.__file__}")
        
        # ?????????????
        lib_path = os.path.join(os.path.dirname(torchaudio.__file__), 'lib')
        if os.path.exists(lib_path):
            lib_files = os.listdir(lib_path)
            print(f"? ??????????: {lib_files}")
        
        # ?????????
        try:
            backends = torchaudio.list_audio_backends()
            print(f"? ????????????????: {backends}")
        except:
            print("? ?????????????????????")
        
        return torchaudio.__version__
    except ImportError as e:
        print(f"? torchaudio ????????: {e}")
        
        # ????????
        if "undefined symbol" in str(e):
            print("? ABI??????????????!")
            print("   ??? PyTorch ? torchaudio ??????????????")
        
        return None
    except Exception as e:
        print(f"? torchaudio ???????: {e}")
        return None

def check_pip_packages():
    """pip ??????????????????????"""
    print("\n? ???????:")
    
    try:
        result = subprocess.run([sys.executable, '-m', 'pip', 'list'], 
                              capture_output=True, text=True)
        lines = result.stdout.split('\n')
        
        pytorch_packages = []
        for line in lines:
            if any(pkg in line.lower() for pkg in ['torch', 'cuda', 'nvidia']):
                pytorch_packages.append(line.strip())
        
        for pkg in pytorch_packages:
            if pkg:
                print(f"  ? {pkg}")
                
    except Exception as e:
        print(f"? pip ?????????????: {e}")

def check_abi_compatibility():
    """ABI ????????"""
    print("\n? ABI ???????:")
    
    try:
        import torch
        print(f"?? PyTorch CXX11 ABI: {torch._C._GLIBCXX_USE_CXX11_ABI}")
        
        # C++ ??????????
        import ctypes
        try:
            libstdc = ctypes.CDLL("libstdc++.so.6")
            print("? libstdc++ ??????")
        except:
            print("? libstdc++ ??????")
            
    except Exception as e:
        print(f"? ABI ???????: {e}")

def check_symbol_availability():
    """????????????"""
    print("\n? ???????????:")
    
    try:
        import torch
        # ?????????????????
        if hasattr(torch.autograd.Node, 'name'):
            print("? torch.autograd.Node.name ????")
        else:
            print("? torch.autograd.Node.name ????")
            
        # torch.autograd.Node ???????
        node_attrs = dir(torch.autograd.Node)
        public_attrs = [attr for attr in node_attrs if not attr.startswith('_')]
        print(f"? torch.autograd.Node ????: {public_attrs}")
        
    except Exception as e:
        print(f"? ???????????: {e}")

def test_basic_functionality():
    """????????"""
    print("\n? ???????:")
    
    try:
        import torch
        import torchaudio
        
        # PyTorch ?????
        print("? PyTorch ?????...")
        tensor = torch.randn(2, 3)
        print(f"  ? CPU ??????: {tensor.shape}")
        
        if torch.cuda.is_available():
            cuda_tensor = tensor.cuda()
            print(f"  ? CUDA ??????: {cuda_tensor.device}")
            cuda_tensor = cuda_tensor.cpu()
            print("  ? GPU ? CPU ????")
        
        # torchaudio ?????
        print("? torchaudio ?????...")
        waveform = torch.randn(1, 16000)  # 1???????
        print(f"  ? ????????: {waveform.shape}")
        
        # ?????
        try:
            transform = torchaudio.transforms.MelSpectrogram()
            mel_spec = transform(waveform)
            print(f"  ? ????????????: {mel_spec.shape}")
        except Exception as e:
            print(f"  ?? ??????????????: {e}")
        
        print("? ?????????")
        return True
        
    except Exception as e:
        print(f"? ?????????: {e}")
        return False

def suggest_fixes(torch_version, torchaudio_version):
    """???????"""
    print("\n? ????:")
    
    if torch_version and torchaudio_version:
        print(f"? ??????????:")
        print(f"   PyTorch: {torch_version}")
        print(f"   torchaudio: {torchaudio_version}")
        
        # ????????????
        try:
            torch_parts = torch_version.split('.')
            torch_major = torch_parts[0]
            torch_minor = torch_parts[1]
            
            audio_parts = torchaudio_version.split('.')
            audio_major = audio_parts[0]
            audio_minor = audio_parts[1]
            
            if torch_major != audio_major or torch_minor != audio_minor:
                print("? ????????????????!")
                print("\n? ??????:")
                print("1. ???????????????????:")
                print("   pip uninstall torch torchaudio -y")
                print("   pip install torch==2.4.1+cu124 torchaudio==2.4.1+cu124 --index-url https://download.pytorch.org/whl/cu124")
            else:
                print("? ??????????????")
                print("   ABI ???????????????????")
                
        except Exception as e:
            print(f"?? ??????????: {e}")
        
        print("\n? Docker ????:")
        print("1. Dockerfile.gpu ? requirements.gpu.txt ???")
        print("2. Docker ????????? (--no-cache)")
        print("3. ??????????: ./fix_abi_compatibility.sh")
        
    else:
        print("? PyTorch ??? torchaudio ?????????????????")
        print("\n? ??????:")
        print("1. ??????????:")
        print("   pip uninstall torch torchaudio -y")
        print("   pip install torch==2.4.1+cu124 torchaudio==2.4.1+cu124 --index-url https://download.pytorch.org/whl/cu124")
        print("\n2. ??????????CPU????:")
        print("   pip install torch==2.4.1+cpu torchaudio==2.4.1+cpu --index-url https://download.pytorch.org/whl/cpu")

def check_whisper_compatibility():
    """Whisper???????????"""
    print("\n? Whisper ???????:")
    
    try:
        import faster_whisper
        print(f"? faster-whisper ?????: {faster_whisper.__version__}")
        
        # ??????????????
        try:
            print("? ??????????...")
            from faster_whisper import WhisperModel
            
            # CPU ?????????
            model = WhisperModel("tiny", device="cpu", compute_type="int8")
            print("  ? CPU ?????????")
            
            # GPU ??? (???????)
            import torch
            if torch.cuda.is_available():
                try:
                    gpu_model = WhisperModel("tiny", device="cuda", compute_type="float16")
                    print("  ? GPU ?????????")
                except Exception as e:
                    print(f"  ?? GPU ?????????: {e}")
            
        except Exception as e:
            print(f"  ? ????????????: {e}")
        
    except ImportError as e:
        print(f"? faster-whisper ????????: {e}")
    except Exception as e:
        print(f"? Whisper ???????: {e}")

def generate_report():
    """?????????"""
    print("\n? ?????????...")
    
    report_file = "pytorch_diagnostic_report.txt"
    
    try:
        with open(report_file, "w", encoding="utf-8") as f:
            f.write("PyTorch/torchaudio ABI ?????????\n")
            f.write("=" * 50 + "\n\n")
            
            # ??????
            f.write(f"Python ?????: {sys.version}\n")
            f.write(f"????: {os.popen('date').read().strip()}\n")
            f.write(f"????: {os.popen('hostname').read().strip()}\n\n")
            
            # PyTorch ??
            try:
                import torch
                f.write(f"PyTorch ?????: {torch.__version__}\n")
                f.write(f"CUDA ????: {torch.cuda.is_available()}\n")
                if torch.cuda.is_available():
                    f.write(f"CUDA ?????: {torch.version.cuda}\n")
                    f.write(f"GPU ?: {torch.cuda.device_count()}\n")
            except:
                f.write("PyTorch: ????????\n")
            
            # torchaudio ??
            try:
                import torchaudio
                f.write(f"torchaudio ?????: {torchaudio.__version__}\n")
            except:
                f.write("torchaudio: ????????\n")
            
            f.write("\n????\n")
        
        print(f"? ?????????????: {report_file}")
        
    except Exception as e:
        print(f"? ?????????: {e}")

def main():
    """?????????"""
    print("? PyTorch / torchaudio ABI ????? v2.2.2")
    print("=" * 55)
    
    # Python ?????????
    python_version = check_python_version()
    
    # PyTorch ????
    torch_version = check_pytorch_installation()
    
    # torchaudio ????
    torchaudio_version = check_torchaudio_installation()
    
    # pip ?????????
    check_pip_packages()
    
    # ABI ???????
    check_abi_compatibility()
    
    # ???????????
    check_symbol_availability()
    
    # ???????
    test_success = test_basic_functionality()
    
    # Whisper ???????
    check_whisper_compatibility()
    
    # ????
    suggest_fixes(torch_version, torchaudio_version)
    
    # ??????
    generate_report()
    
    print("\n" + "=" * 55)
    
    if torch_version and torchaudio_version and test_success:
        print("? ???? - ???????????????")
        print("\n? ??????:")
        print("   1. ???????????????????")
        print("   2. ?????????????????????: ./fix_abi_compatibility.sh")
    else:
        print("? ???? - ?????????????")
        print("\n? ???????:")
        print("   1. ??????????: ./fix_abi_compatibility.sh")
        print("   2. ?????????????????????????")
    
    print("\n? ???????? pytorch_diagnostic_report.txt ????????")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n?? ??????????")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n? ???????????????: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)