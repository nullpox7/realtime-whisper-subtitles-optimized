#!/usr/bin/env python3
"""
Docker ?????????????? v2.1
realtime-whisper-subtitles-optimized ???????
"""

import os
import sys
import subprocess
import json
from pathlib import Path

def run_command(cmd, capture_output=True):
    """???????"""
    try:
        if capture_output:
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            return result.returncode, result.stdout, result.stderr
        else:
            result = subprocess.run(cmd, shell=True)
            return result.returncode, "", ""
    except Exception as e:
        return 1, "", str(e)

def check_container_status():
    """????????????"""
    print("=== ?????????? ===")
    
    # ????????
    ret, stdout, stderr = run_command("docker ps -a")
    if ret == 0:
        print("?????:")
        print(stdout)
    else:
        print(f"???: {stderr}")
    
    # ??????????
    container_name = "realtime-whisper-subtitles-optimized-whisper-subtitles-1"
    print(f"\n=== {container_name} ??? ===")
    
    ret, stdout, stderr = run_command(f"docker inspect {container_name}")
    if ret == 0:
        try:
            data = json.loads(stdout)
            container = data[0]
            state = container['State']
            config = container['Config']
            mounts = container['Mounts']
            
            print(f"??: {state['Status']}")
            print(f"?????: {state['RestartCount']}")
            print(f"?????: {state.get('ExitCode', 'N/A')}")
            print(f"???: {state.get('Error', 'None')}")
            
            print("\n????:")
            for env in config.get('Env', []):
                if 'LOG' in env or 'PATH' in env:
                    print(f"  {env}")
            
            print("\n????:")
            for mount in mounts:
                if 'logs' in mount['Destination']:
                    print(f"  {mount['Source']} -> {mount['Destination']}")
            
        except json.JSONDecodeError as e:
            print(f"JSON?????: {e}")
    else:
        print(f"???: {stderr}")

def check_logs():
    """???????"""
    print("\n=== ?????? ===")
    
    container_name = "realtime-whisper-subtitles-optimized-whisper-subtitles-1"
    
    # ?????
    print("????? (???30?):")
    ret, stdout, stderr = run_command(f"docker logs {container_name} --tail 30")
    if ret == 0:
        print(stdout)
        if stderr:
            print("STDERR:")
            print(stderr)
    else:
        print(f"???????: {stderr}")

def check_missing_modules():
    """??????Python??????????"""
    print("\n=== ??????????? ===")
    
    container_name = "realtime-whisper-subtitles-optimized-whisper-subtitles-1"
    
    # ???? ModuleNotFoundError ???
    ret, stdout, stderr = run_command(f"docker logs {container_name} 2>&1 | grep -i 'ModuleNotFoundError\\|ImportError'")
    if ret == 0 and stdout:
        print("????????????:")
        lines = stdout.strip().split('\n')
        for line in lines:
            if 'ModuleNotFoundError' in line or 'ImportError' in line:
                print(f"  ? {line}")
    else:
        print("  ? ???????????????????")

def check_host_directories():
    """????????????????"""
    print("\n=== ?????????????? ===")
    
    # ???????????
    base_dirs = []
    
    # ???????????????
    possible_bases = [
        "./data",
        "../data", 
        "data",
        os.path.expanduser("~/realtime-whisper-subtitles-optimized/data"),
        os.path.expanduser("~/Codes/realtime-whisper-subtitles-optimized/data"),
    ]
    
    # Windows?????Windows??????
    if os.name == 'nt':
        possible_bases.extend([
            "C:\\Users\\kumo1\\Codes\\realtime-whisper-subtitles-optimized\\data",
            "C:\\realtime-whisper-subtitles-optimized\\data"
        ])
    
    # ????????????????
    detected_base = None
    for base in possible_bases:
        if os.path.exists(base):
            detected_base = base
            break
    
    if detected_base:
        print(f"??????????????: {detected_base}")
        subdirs = ["logs", "models", "outputs", "cache"]
        for subdir in subdirs:
            dir_path = os.path.join(detected_base, subdir)
            base_dirs.append(dir_path)
    else:
        print("??????????????????????????????????")
        base_dirs = ["./data/logs", "./data/models", "./data/outputs", "./data/cache"]
    
    for dir_path in base_dirs:
        print(f"\n?????: {dir_path}")
        if os.path.exists(dir_path):
            print("  ? ?????")
            # ??????
            try:
                files = os.listdir(dir_path)
                if files:
                    print(f"  ?????: {len(files)}")
                    for f in files[:5]:  # ???5????
                        print(f"    - {f}")
                    if len(files) > 5:
                        print(f"    ... ? {len(files) - 5} ????")
                else:
                    print("  ? ????????")
            except PermissionError:
                print("  ? ????????")
        else:
            print("  ? ??????")
            # ?????????
            try:
                os.makedirs(dir_path, exist_ok=True)
                print(f"  ? ?????????????: {dir_path}")
            except Exception as e:
                print(f"  ? ??????????: {e}")

def rebuild_image():
    """Docker?????????"""
    print("\n=== Docker???????? ===")
    
    print("??????????????????...")
    
    # ??????????
    commands = [
        "docker-compose down",
        "docker rmi realtime-whisper-subtitles-optimized-whisper-subtitles || echo '???????????????'",
        "docker system prune -f"
    ]
    
    for cmd in commands:
        print(f"???: {cmd}")
        ret, stdout, stderr = run_command(cmd)
        if ret == 0:
            print("  ? ??")
            if stdout:
                print(f"  ??: {stdout.strip()}")
        else:
            print(f"  ?? ??: {stderr}")
    
    print("\n????????????...")
    ret, stdout, stderr = run_command("docker-compose build --no-cache whisper-subtitles")
    if ret == 0:
        print("? ???????????????")
    else:
        print(f"? ??????: {stderr}")
        return False
    
    return True

def fix_container():
    """??????????"""
    print("\n=== ?? ??????? ===")
    print("????:")
    print("  ? ???????????")
    print("  ? ??????????")
    print("  ? Docker???????")
    print()
    
    # 1. ???????????????????
    check_host_directories()
    
    # 2. Git???????
    print("\n? ??????...")
    ret, stdout, stderr = run_command("git status")
    if ret == 0:
        print("  ? Git???????")
        print("  ???????...")
        ret2, stdout2, stderr2 = run_command("git pull origin main")
        if ret2 == 0:
            print("  ? ??????????")
            if "Already up to date" in stdout2:
                print("    (????????)")
            else:
                print(f"    ??: {stdout2.strip()}")
        else:
            print(f"  ?? Git pull??: {stderr2}")
    else:
        print("  ?? Git????????????????????????????")
    
    # 3. Docker?????????
    print("\n? Docker????????...")
    if rebuild_image():
        print("? ??????????")
    else:
        print("? ??????????")
        return False
    
    # 4. ??????
    print("\n? ???????...")
    ret, stdout, stderr = run_command("docker-compose up -d")
    if ret == 0:
        print("? ???????????")
    else:
        print(f"? ?????: {stderr}")
        return False
    
    # 5. ????
    print("\n? ??????30????...")
    import time
    time.sleep(30)  # ????
    
    ret, stdout, stderr = run_command("curl -s http://localhost:8000/health")
    if ret == 0:
        print("? ???????????????????")
        try:
            import json
            health_data = json.loads(stdout)
            print(f"  ?????: {health_data.get('status', 'unknown')}")
            print(f"  ????????: {health_data.get('log_directory', 'unknown')}")
        except:
            print(f"  ?????: {stdout}")
    else:
        print(f"? ???????????????: {stderr}")
        print("  ?????????...")
        check_logs()
        check_missing_modules()
        return False
    
    return True

def show_common_errors():
    """??????????????"""
    print("\n=== ? ??????????? ===")
    print()
    print("1. ? FileNotFoundError: /app/logs/whisper_app.log")
    print("   ???: python debug_script.py fix")
    print()
    print("2. ? ModuleNotFoundError: No module named 'noisereduce'")
    print("   ???: ????????????????????????")
    print("   ????: docker-compose build --no-cache whisper-subtitles")
    print()
    print("3. ? ?????????????")
    print("   ??: ???1???2???")
    print("   ???: python debug_script.py fix")
    print()
    print("4. ? http://localhost:8000 ?????????")
    print("   ????:")
    print("   - ??????????????: docker ps")
    print("   - ???8000?????: netstat -tulpn | grep 8000")
    print("   - ??????????")
    print()

def create_quick_fix_script():
    """??????????????"""
    print("\n=== ????????????? ===")
    
    script_content = '''#!/bin/bash
# Real-time Whisper Subtitles - ??????????? v2.1
set -e

echo "? Real-time Whisper Subtitles - ??????"
echo "=============================================="
echo "????:"
echo "  ? ???????????"
echo "  ? ??????? (noisereduce?)"
echo "  ? Docker???????"
echo ""

# 1. ????????
echo "? ?????????..."
mkdir -p data/{logs,models,outputs,cache}
chmod -R 755 data/ 2>/dev/null || echo "????????? (Windows?)"

# 2. ?????
echo "? ??????..."
git pull origin main || echo "Git pull?? - ???????????"

# 3. ?????????????
echo "?? ?????????..."
docker-compose down || echo "????????"
docker rmi realtime-whisper-subtitles-optimized-whisper-subtitles 2>/dev/null || echo "??????????"

# 4. ??????????
echo "? ????????????????????..."
echo "  ? ??????????"
echo "    - noisereduce==3.0.0 (???????)"
echo "    - redis==5.0.1 (???????)"
echo "    - ??????????????????"
docker-compose build --no-cache whisper-subtitles

# 5. ??????
echo "? ???????..."
docker-compose up -d

# 6. ????
echo "? ??????30????..."
sleep 30
if curl -f http://localhost:8000/health >/dev/null 2>&1; then
    echo "? ????????????????????????"
    echo ""
    echo "? ????? http://localhost:8000 ???????????"
    echo "? ????: python debug_script.py"
else
    echo "? ?????????"
    echo "? ???????: python debug_script.py logs"
fi
'''
    
    with open("quick_fix.sh", "w", encoding="utf-8") as f:
        f.write(script_content)
    
    # ????????Linux/Mac?
    try:
        os.chmod("quick_fix.sh", 0o755)
    except:
        pass  # Windows ????
    
    print("? quick_fix.sh ???????")
    print("????:")
    print("  Linux/Mac: ./quick_fix.sh")
    print("  Windows: bash quick_fix.sh")

def show_fix_instructions():
    """???????"""
    print("\n=== ?? ???? (v2.1) ===")
    print()
    print("? ?????:")
    print("  - ????????????????")
    print("  - noisereduce?????????????")
    print("  - Docker????????????")
    print()
    print("? ??????:")
    print("1. ? ?????:")
    print("   git pull origin main")
    print()
    print("2. ?? ????????:")
    print("   docker-compose down")
    print("   docker rmi realtime-whisper-subtitles-optimized-whisper-subtitles")
    print()
    print("3. ? ??????????:")
    print("   docker-compose build --no-cache whisper-subtitles")
    print()
    print("4. ? ??????:")
    print("   docker-compose up -d")
    print()
    print("? ????????:")
    print("   python debug_script.py fix")
    print()
    print("? ?????????????:")
    print("   python debug_script.py quickfix")

def main():
    """?????"""
    print("Real-time Whisper Subtitles Optimized - ??????? v2.1")
    print("=" * 70)
    
    if len(sys.argv) > 1:
        action = sys.argv[1]
        if action == "status":
            check_container_status()
        elif action == "logs":
            check_logs()
            check_missing_modules()
        elif action == "dirs":
            check_host_directories()
        elif action == "fix":
            if fix_container():
                print("\n? ??????????")
                print("? http://localhost:8000 ???????????")
            else:
                print("\n? ??????????????")
                show_common_errors()
        elif action == "rebuild":
            rebuild_image()
        elif action == "quickfix":
            create_quick_fix_script()
        elif action == "errors":
            show_common_errors()
        elif action == "help":
            show_fix_instructions()
        else:
            print(f"????????: {action}")
            print("??????????: status, logs, dirs, fix, rebuild, quickfix, errors, help")
    else:
        # ????????
        check_container_status()
        check_logs()
        check_missing_modules()
        check_host_directories()
        
        # ?????
        show_fix_instructions()

if __name__ == "__main__":
    main()
